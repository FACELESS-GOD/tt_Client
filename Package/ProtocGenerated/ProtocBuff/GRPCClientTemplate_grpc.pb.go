// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: ProtocBuff/GRPCClientTemplate.proto

package tt_git

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TestGRPCService_GetData_FullMethodName       = "/TestServer.TestGRPCService/GetData"
	TestGRPCService_AddData_FullMethodName       = "/TestServer.TestGRPCService/AddData"
	TestGRPCService_GetDataStatus_FullMethodName = "/TestServer.TestGRPCService/GetDataStatus"
)

// TestGRPCServiceClient is the client API for TestGRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestGRPCServiceClient interface {
	GetData(ctx context.Context, in *DataReceipt, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Data], error)
	AddData(ctx context.Context, in *SendData, opts ...grpc.CallOption) (*DataReceipt, error)
	GetDataStatus(ctx context.Context, in *DataReceipt, opts ...grpc.CallOption) (*DataStatus, error)
}

type testGRPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestGRPCServiceClient(cc grpc.ClientConnInterface) TestGRPCServiceClient {
	return &testGRPCServiceClient{cc}
}

func (c *testGRPCServiceClient) GetData(ctx context.Context, in *DataReceipt, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Data], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TestGRPCService_ServiceDesc.Streams[0], TestGRPCService_GetData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DataReceipt, Data]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TestGRPCService_GetDataClient = grpc.ServerStreamingClient[Data]

func (c *testGRPCServiceClient) AddData(ctx context.Context, in *SendData, opts ...grpc.CallOption) (*DataReceipt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataReceipt)
	err := c.cc.Invoke(ctx, TestGRPCService_AddData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testGRPCServiceClient) GetDataStatus(ctx context.Context, in *DataReceipt, opts ...grpc.CallOption) (*DataStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataStatus)
	err := c.cc.Invoke(ctx, TestGRPCService_GetDataStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestGRPCServiceServer is the server API for TestGRPCService service.
// All implementations must embed UnimplementedTestGRPCServiceServer
// for forward compatibility.
type TestGRPCServiceServer interface {
	GetData(*DataReceipt, grpc.ServerStreamingServer[Data]) error
	AddData(context.Context, *SendData) (*DataReceipt, error)
	GetDataStatus(context.Context, *DataReceipt) (*DataStatus, error)
	mustEmbedUnimplementedTestGRPCServiceServer()
}

// UnimplementedTestGRPCServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTestGRPCServiceServer struct{}

func (UnimplementedTestGRPCServiceServer) GetData(*DataReceipt, grpc.ServerStreamingServer[Data]) error {
	return status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedTestGRPCServiceServer) AddData(context.Context, *SendData) (*DataReceipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddData not implemented")
}
func (UnimplementedTestGRPCServiceServer) GetDataStatus(context.Context, *DataReceipt) (*DataStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataStatus not implemented")
}
func (UnimplementedTestGRPCServiceServer) mustEmbedUnimplementedTestGRPCServiceServer() {}
func (UnimplementedTestGRPCServiceServer) testEmbeddedByValue()                         {}

// UnsafeTestGRPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestGRPCServiceServer will
// result in compilation errors.
type UnsafeTestGRPCServiceServer interface {
	mustEmbedUnimplementedTestGRPCServiceServer()
}

func RegisterTestGRPCServiceServer(s grpc.ServiceRegistrar, srv TestGRPCServiceServer) {
	// If the following call pancis, it indicates UnimplementedTestGRPCServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TestGRPCService_ServiceDesc, srv)
}

func _TestGRPCService_GetData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DataReceipt)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestGRPCServiceServer).GetData(m, &grpc.GenericServerStream[DataReceipt, Data]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TestGRPCService_GetDataServer = grpc.ServerStreamingServer[Data]

func _TestGRPCService_AddData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestGRPCServiceServer).AddData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestGRPCService_AddData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestGRPCServiceServer).AddData(ctx, req.(*SendData))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestGRPCService_GetDataStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataReceipt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestGRPCServiceServer).GetDataStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestGRPCService_GetDataStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestGRPCServiceServer).GetDataStatus(ctx, req.(*DataReceipt))
	}
	return interceptor(ctx, in, info, handler)
}

// TestGRPCService_ServiceDesc is the grpc.ServiceDesc for TestGRPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestGRPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TestServer.TestGRPCService",
	HandlerType: (*TestGRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddData",
			Handler:    _TestGRPCService_AddData_Handler,
		},
		{
			MethodName: "GetDataStatus",
			Handler:    _TestGRPCService_GetDataStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetData",
			Handler:       _TestGRPCService_GetData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ProtocBuff/GRPCClientTemplate.proto",
}
